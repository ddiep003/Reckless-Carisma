
RemoteControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000004ea  0000057e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800108  00800108  00000586  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000586  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001090  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c7  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000843  00000000  00000000  00002137  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  0000297c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058d  00000000  00000000  00002b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000064b  00000000  00000000  00003109  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00003754  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c0 c0       	rjmp	.+384    	; 0x1b6 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ee       	ldi	r30, 0xEA	; 234
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5e d1       	rcall	.+700    	; 0x380 <main>
  c4:	10 c2       	rjmp	.+1056   	; 0x4e6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	PORTB = output;
	return output;
}
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	48 17       	cp	r20, r24
  de:	59 07       	cpc	r21, r25
  e0:	29 f4       	brne	.+10     	; 0xec <delay_ms+0x24>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	77 e0       	ldi	r23, 0x07	; 7
  ea:	63 e0       	ldi	r22, 0x03	; 3
  ec:	27 2f       	mov	r18, r23
  ee:	36 2f       	mov	r19, r22
  f0:	ef cf       	rjmp	.-34     	; 0xd0 <delay_ms+0x8>

000000f2 <LCD_WriteCommand>:
  f2:	5e 98       	cbi	0x0b, 6	; 11
  f4:	88 b9       	out	0x08, r24	; 8
  f6:	5f 9a       	sbi	0x0b, 7	; 11
  f8:	00 00       	nop
  fa:	5f 98       	cbi	0x0b, 7	; 11
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	e3 cf       	rjmp	.-58     	; 0xc8 <delay_ms>
 102:	08 95       	ret

00000104 <LCD_Cursor>:
 104:	81 31       	cpi	r24, 0x11	; 17
 106:	18 f4       	brcc	.+6      	; 0x10e <LCD_Cursor+0xa>
 108:	81 58       	subi	r24, 0x81	; 129
 10a:	f3 cf       	rjmp	.-26     	; 0xf2 <LCD_WriteCommand>
 10c:	08 95       	ret
 10e:	81 55       	subi	r24, 0x51	; 81
 110:	f0 cf       	rjmp	.-32     	; 0xf2 <LCD_WriteCommand>
 112:	08 95       	ret

00000114 <LCD_init>:
 114:	84 e6       	ldi	r24, 0x64	; 100
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	d7 df       	rcall	.-82     	; 0xc8 <delay_ms>
 11a:	88 e3       	ldi	r24, 0x38	; 56
 11c:	ea df       	rcall	.-44     	; 0xf2 <LCD_WriteCommand>
 11e:	86 e0       	ldi	r24, 0x06	; 6
 120:	e8 df       	rcall	.-48     	; 0xf2 <LCD_WriteCommand>
 122:	8f e0       	ldi	r24, 0x0F	; 15
 124:	e6 df       	rcall	.-52     	; 0xf2 <LCD_WriteCommand>
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	e4 df       	rcall	.-56     	; 0xf2 <LCD_WriteCommand>
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	cc cf       	rjmp	.-104    	; 0xc8 <delay_ms>
 130:	08 95       	ret

00000132 <LCD_WriteData>:
 132:	5e 9a       	sbi	0x0b, 6	; 11
 134:	88 b9       	out	0x08, r24	; 8
 136:	5f 9a       	sbi	0x0b, 7	; 11
 138:	00 00       	nop
 13a:	5f 98       	cbi	0x0b, 7	; 11
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	c3 cf       	rjmp	.-122    	; 0xc8 <delay_ms>
 142:	08 95       	ret

00000144 <LCD_DisplayString>:
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	fb 01       	movw	r30, r22
 14c:	90 81       	ld	r25, Z
 14e:	99 23       	and	r25, r25
 150:	51 f0       	breq	.+20     	; 0x166 <LCD_DisplayString+0x22>
 152:	eb 01       	movw	r28, r22
 154:	11 e0       	ldi	r17, 0x01	; 1
 156:	18 0f       	add	r17, r24
 158:	d5 df       	rcall	.-86     	; 0x104 <LCD_Cursor>
 15a:	89 91       	ld	r24, Y+
 15c:	ea df       	rcall	.-44     	; 0x132 <LCD_WriteData>
 15e:	81 2f       	mov	r24, r17
 160:	98 81       	ld	r25, Y
 162:	91 11       	cpse	r25, r1
 164:	f7 cf       	rjmp	.-18     	; 0x154 <LCD_DisplayString+0x10>
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	08 95       	ret

0000016e <TimerOn>:
 16e:	8b e0       	ldi	r24, 0x0B	; 11
 170:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 174:	8d e7       	ldi	r24, 0x7D	; 125
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 17c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 186:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 18a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 18e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 192:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 196:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 19a:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 19e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr>
 1a2:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x1>
 1a6:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <_avr_timer_cntcurr+0x2>
 1aa:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <_avr_timer_cntcurr+0x3>
 1ae:	8f b7       	in	r24, 0x3f	; 63
 1b0:	80 68       	ori	r24, 0x80	; 128
 1b2:	8f bf       	out	0x3f, r24	; 63
 1b4:	08 95       	ret

000001b6 <__vector_13>:
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
 1c4:	af 93       	push	r26
 1c6:	bf 93       	push	r27
 1c8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_avr_timer_cntcurr>
 1cc:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x1>
 1d0:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_avr_timer_cntcurr+0x2>
 1d4:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_avr_timer_cntcurr+0x3>
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	a1 09       	sbc	r26, r1
 1dc:	b1 09       	sbc	r27, r1
 1de:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr>
 1e2:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x1>
 1e6:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <_avr_timer_cntcurr+0x2>
 1ea:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <_avr_timer_cntcurr+0x3>
 1ee:	89 2b       	or	r24, r25
 1f0:	8a 2b       	or	r24, r26
 1f2:	8b 2b       	or	r24, r27
 1f4:	99 f4       	brne	.+38     	; 0x21c <__vector_13+0x66>
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <TimerFlag>
 1fc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 200:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 204:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 208:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 20c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr>
 210:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x1>
 214:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <_avr_timer_cntcurr+0x2>
 218:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <_avr_timer_cntcurr+0x3>
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <initUSART>:
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	81 f0       	breq	.+32     	; 0x252 <initUSART+0x24>
 232:	e1 ec       	ldi	r30, 0xC1	; 193
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	88 61       	ori	r24, 0x18	; 24
 23a:	80 83       	st	Z, r24
 23c:	e2 ec       	ldi	r30, 0xC2	; 194
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	86 60       	ori	r24, 0x06	; 6
 244:	80 83       	st	Z, r24
 246:	83 e3       	ldi	r24, 0x33	; 51
 248:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 24c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 250:	08 95       	ret
 252:	e9 ec       	ldi	r30, 0xC9	; 201
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	88 61       	ori	r24, 0x18	; 24
 25a:	80 83       	st	Z, r24
 25c:	ea ec       	ldi	r30, 0xCA	; 202
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	86 60       	ori	r24, 0x06	; 6
 264:	80 83       	st	Z, r24
 266:	83 e3       	ldi	r24, 0x33	; 51
 268:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 26c:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 270:	08 95       	ret

00000272 <USART_Flush>:
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	29 f4       	brne	.+10     	; 0x280 <USART_Flush+0xe>
 276:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 27a:	88 23       	and	r24, r24
 27c:	84 f0       	brlt	.+32     	; 0x29e <USART_Flush+0x2c>
 27e:	08 95       	ret
 280:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 284:	88 23       	and	r24, r24
 286:	ac f4       	brge	.+42     	; 0x2b2 <USART_Flush+0x40>
 288:	a6 ec       	ldi	r26, 0xC6	; 198
 28a:	b0 e0       	ldi	r27, 0x00	; 0
 28c:	e0 ec       	ldi	r30, 0xC0	; 192
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	8c 91       	ld	r24, X
 292:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 296:	80 81       	ld	r24, Z
 298:	88 23       	and	r24, r24
 29a:	d4 f3       	brlt	.-12     	; 0x290 <USART_Flush+0x1e>
 29c:	08 95       	ret
 29e:	ae ec       	ldi	r26, 0xCE	; 206
 2a0:	b0 e0       	ldi	r27, 0x00	; 0
 2a2:	e8 ec       	ldi	r30, 0xC8	; 200
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	8c 91       	ld	r24, X
 2a8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 2ac:	80 81       	ld	r24, Z
 2ae:	88 23       	and	r24, r24
 2b0:	d4 f3       	brlt	.-12     	; 0x2a6 <USART_Flush+0x34>
 2b2:	08 95       	ret

000002b4 <USART_Send>:
 2b4:	61 30       	cpi	r22, 0x01	; 1
 2b6:	41 f0       	breq	.+16     	; 0x2c8 <USART_Send+0x14>
 2b8:	e0 ec       	ldi	r30, 0xC0	; 192
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	90 81       	ld	r25, Z
 2be:	95 ff       	sbrs	r25, 5
 2c0:	fd cf       	rjmp	.-6      	; 0x2bc <USART_Send+0x8>
 2c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2c6:	08 95       	ret
 2c8:	e8 ec       	ldi	r30, 0xC8	; 200
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	90 81       	ld	r25, Z
 2ce:	95 ff       	sbrs	r25, 5
 2d0:	fd cf       	rjmp	.-6      	; 0x2cc <USART_Send+0x18>
 2d2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2d6:	08 95       	ret

000002d8 <InitADC>:
 2d8:	ec e7       	ldi	r30, 0x7C	; 124
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	80 64       	ori	r24, 0x40	; 64
 2e0:	80 83       	st	Z, r24
 2e2:	ea e7       	ldi	r30, 0x7A	; 122
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	87 68       	ori	r24, 0x87	; 135
 2ea:	80 83       	st	Z, r24
 2ec:	08 95       	ret

000002ee <readadc>:
 2ee:	ec e7       	ldi	r30, 0x7C	; 124
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	90 81       	ld	r25, Z
 2f4:	87 70       	andi	r24, 0x07	; 7
 2f6:	98 7f       	andi	r25, 0xF8	; 248
 2f8:	89 2b       	or	r24, r25
 2fa:	80 83       	st	Z, r24
 2fc:	ea e7       	ldi	r30, 0x7A	; 122
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	80 64       	ori	r24, 0x40	; 64
 304:	80 83       	st	Z, r24
 306:	80 81       	ld	r24, Z
 308:	86 fd       	sbrc	r24, 6
 30a:	fd cf       	rjmp	.-6      	; 0x306 <readadc+0x18>
 30c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 310:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 314:	08 95       	ret

00000316 <DisplayAxis>:
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
 322:	a8 97       	sbiw	r28, 0x28	; 40
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	f8 94       	cli
 328:	de bf       	out	0x3e, r29	; 62
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	cd bf       	out	0x3d, r28	; 61
 32e:	8b 01       	movw	r16, r22
 330:	4a e0       	ldi	r20, 0x0A	; 10
 332:	50 e0       	ldi	r21, 0x00	; 0
 334:	be 01       	movw	r22, r28
 336:	6f 5f       	subi	r22, 0xFF	; 255
 338:	7f 4f       	sbci	r23, 0xFF	; 255
 33a:	98 d0       	rcall	.+304    	; 0x46c <itoa>
 33c:	bc 01       	movw	r22, r24
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	01 df       	rcall	.-510    	; 0x144 <LCD_DisplayString>
 342:	4a e0       	ldi	r20, 0x0A	; 10
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	be 01       	movw	r22, r28
 348:	6b 5e       	subi	r22, 0xEB	; 235
 34a:	7f 4f       	sbci	r23, 0xFF	; 255
 34c:	c8 01       	movw	r24, r16
 34e:	8e d0       	rcall	.+284    	; 0x46c <itoa>
 350:	bc 01       	movw	r22, r24
 352:	81 e1       	ldi	r24, 0x11	; 17
 354:	f7 de       	rcall	.-530    	; 0x144 <LCD_DisplayString>
 356:	a8 96       	adiw	r28, 0x28	; 40
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	f8 94       	cli
 35c:	de bf       	out	0x3e, r29	; 62
 35e:	0f be       	out	0x3f, r0	; 63
 360:	cd bf       	out	0x3d, r28	; 61
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	08 95       	ret

0000036c <SendData>:
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 36c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
void SendData(char x)
{
	if(USART_IsSendReady(0))
 370:	95 ff       	sbrs	r25, 5
 372:	04 c0       	rjmp	.+8      	; 0x37c <SendData+0x10>
	{
		SetBit(PORTD, 5, 1);
 374:	9b b1       	in	r25, 0x0b	; 11
		USART_Send(x, 0);
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	9d cf       	rjmp	.-198    	; 0x2b4 <USART_Send>
 37a:	08 95       	ret
	}
	else
	{
		SetBit(PORTD, 5, 0);
 37c:	8b b1       	in	r24, 0x0b	; 11
 37e:	08 95       	ret

00000380 <main>:
	}
}
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 380:	11 b8       	out	0x01, r1	; 1
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 386:	84 b9       	out	0x04, r24	; 4
 388:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
 38a:	87 b9       	out	0x07, r24	; 7
 38c:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 38e:	8a b9       	out	0x0a, r24	; 10
 390:	1b b8       	out	0x0b, r1	; 11

	TimerOn();
 392:	ed de       	rcall	.-550    	; 0x16e <TimerOn>
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 394:	8a e0       	ldi	r24, 0x0A	; 10
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	a0 e0       	ldi	r26, 0x00	; 0
 39a:	b0 e0       	ldi	r27, 0x00	; 0
 39c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M>
 3a0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x1>
 3a4:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <_avr_timer_M+0x2>
 3a8:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 3ac:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr>
 3b0:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x1>
 3b4:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <_avr_timer_cntcurr+0x2>
 3b8:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <_avr_timer_cntcurr+0x3>
	TimerSet(10);
	uint16_t x,y;
	InitADC();
 3bc:	8d df       	rcall	.-230    	; 0x2d8 <InitADC>
	LCD_init();
 3be:	aa de       	rcall	.-684    	; 0x114 <LCD_init>
	initUSART(0);
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	35 df       	rcall	.-406    	; 0x22e <initUSART>
	USART_Flush(0);
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	55 df       	rcall	.-342    	; 0x272 <USART_Flush>
			SendData(0x00);
		}
		else if (y_ < min)
		{
			//0101 0101
			PORTB = 0x05;
 3c8:	0f 2e       	mov	r0, r31
 3ca:	f5 e0       	ldi	r31, 0x05	; 5
 3cc:	df 2e       	mov	r13, r31
 3ce:	f0 2d       	mov	r31, r0
			SendData(0x05);
		}
		else if (y_ > max)
		{
			//1010 1010
			PORTB = 0x0A;
 3d0:	0f 2e       	mov	r0, r31
 3d2:	fa e0       	ldi	r31, 0x0A	; 10
 3d4:	cf 2e       	mov	r12, r31
 3d6:	f0 2d       	mov	r31, r0
			SendData(0x0A);
		}
		else if (x_ < min)
		{
			//0101 0110
			PORTB = 0x09;
 3d8:	0f 2e       	mov	r0, r31
 3da:	f9 e0       	ldi	r31, 0x09	; 9
 3dc:	bf 2e       	mov	r11, r31
 3de:	f0 2d       	mov	r31, r0
			SendData(0x09);
		}
		else if (x_ > max)
		{
			//10 10 1001
			PORTB = 0x06;
 3e0:	0f 2e       	mov	r0, r31
 3e2:	f6 e0       	ldi	r31, 0x06	; 6
 3e4:	af 2e       	mov	r10, r31
 3e6:	f0 2d       	mov	r31, r0
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 3e8:	0f 2e       	mov	r0, r31
 3ea:	f0 ec       	ldi	r31, 0xC0	; 192
 3ec:	ef 2e       	mov	r14, r31
 3ee:	f1 2c       	mov	r15, r1
 3f0:	f0 2d       	mov	r31, r0
	int x_;
	int y_;
	unsigned char out;
	while(1)
	{
		LCD_Cursor(1);
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	87 de       	rcall	.-754    	; 0x104 <LCD_Cursor>
		x=readadc(0);      //READ ADC VALUE FROM PA.0
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	7a df       	rcall	.-268    	; 0x2ee <readadc>
 3fa:	ec 01       	movw	r28, r24
		y=readadc(1);      //READ ADC VALUE FROM PA.1
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	77 df       	rcall	.-274    	; 0x2ee <readadc>
		x=x-512;
 400:	d2 50       	subi	r29, 0x02	; 2
		y=y-512;
 402:	bc 01       	movw	r22, r24
 404:	72 50       	subi	r23, 0x02	; 2
		x_ = x;
		y_ = y;
 406:	8b 01       	movw	r16, r22
		DisplayAxis(x, y);
 408:	ce 01       	movw	r24, r28
 40a:	85 df       	rcall	.-246    	; 0x316 <DisplayAxis>
		//SendData(out);
		if(y_ >= min && y_ <= max && x_ >= min && x_ <= max)
 40c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <min>
 410:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <min+0x1>
 414:	02 17       	cp	r16, r18
 416:	13 07       	cpc	r17, r19
 418:	8c f0       	brlt	.+34     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 41a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 41e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 422:	80 17       	cp	r24, r16
 424:	91 07       	cpc	r25, r17
 426:	d4 f0       	brlt	.+52     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 428:	c2 17       	cp	r28, r18
 42a:	d3 07       	cpc	r29, r19
 42c:	dc f0       	brlt	.+54     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 42e:	8c 17       	cp	r24, r28
 430:	9d 07       	cpc	r25, r29
 432:	84 f0       	brlt	.+32     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		{
			PORTB = 0x00;
 434:	15 b8       	out	0x05, r1	; 5
			SendData(0x00);
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	99 df       	rcall	.-206    	; 0x36c <SendData>
 43a:	03 c0       	rjmp	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		}
		else if (y_ < min)
		{
			//0101 0101
			PORTB = 0x05;
 43c:	d5 b8       	out	0x05, r13	; 5
			SendData(0x05);
 43e:	8d 2d       	mov	r24, r13
 440:	95 df       	rcall	.-214    	; 0x36c <SendData>
 442:	f7 01       	movw	r30, r14
 444:	80 81       	ld	r24, Z
		//SendData(0xFF);
		if(USART_HasTransmitted(0))
		{
			//PORTB = 0x01;
		}
		while (!TimerFlag);	// Wait 1 sec
 446:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <TimerFlag>
 44a:	99 23       	and	r25, r25
 44c:	e1 f3       	breq	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		TimerFlag = 0;
 44e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <TimerFlag>
		
	}
 452:	cf cf       	rjmp	.-98     	; 0x3f2 <main+0x72>
			SendData(0x09);
		}
		else if (x_ > max)
		{
			//10 10 1001
			PORTB = 0x06;
 454:	a5 b8       	out	0x05, r10	; 5
			SendData(0x06);
 456:	8a 2d       	mov	r24, r10
 458:	89 df       	rcall	.-238    	; 0x36c <SendData>
 45a:	f3 cf       	rjmp	.-26     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			SendData(0x05);
		}
		else if (y_ > max)
		{
			//1010 1010
			PORTB = 0x0A;
 45c:	c5 b8       	out	0x05, r12	; 5
			SendData(0x0A);
 45e:	8c 2d       	mov	r24, r12
 460:	85 df       	rcall	.-246    	; 0x36c <SendData>
 462:	ef cf       	rjmp	.-34     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		}
		else if (x_ < min)
		{
			//0101 0110
			PORTB = 0x09;
 464:	b5 b8       	out	0x05, r11	; 5
			SendData(0x09);
 466:	8b 2d       	mov	r24, r11
 468:	81 df       	rcall	.-254    	; 0x36c <SendData>
 46a:	eb cf       	rjmp	.-42     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>

0000046c <itoa>:
 46c:	45 32       	cpi	r20, 0x25	; 37
 46e:	51 05       	cpc	r21, r1
 470:	18 f4       	brcc	.+6      	; 0x478 <itoa+0xc>
 472:	42 30       	cpi	r20, 0x02	; 2
 474:	08 f0       	brcs	.+2      	; 0x478 <itoa+0xc>
 476:	04 c0       	rjmp	.+8      	; 0x480 <__itoa_ncheck>
 478:	fb 01       	movw	r30, r22
 47a:	10 82       	st	Z, r1
 47c:	cb 01       	movw	r24, r22
 47e:	08 95       	ret

00000480 <__itoa_ncheck>:
 480:	bb 27       	eor	r27, r27
 482:	4a 30       	cpi	r20, 0x0A	; 10
 484:	31 f4       	brne	.+12     	; 0x492 <__itoa_ncheck+0x12>
 486:	99 23       	and	r25, r25
 488:	22 f4       	brpl	.+8      	; 0x492 <__itoa_ncheck+0x12>
 48a:	bd e2       	ldi	r27, 0x2D	; 45
 48c:	90 95       	com	r25
 48e:	81 95       	neg	r24
 490:	9f 4f       	sbci	r25, 0xFF	; 255
 492:	01 c0       	rjmp	.+2      	; 0x496 <__utoa_common>

00000494 <__utoa_ncheck>:
 494:	bb 27       	eor	r27, r27

00000496 <__utoa_common>:
 496:	fb 01       	movw	r30, r22
 498:	55 27       	eor	r21, r21
 49a:	aa 27       	eor	r26, r26
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	aa 1f       	adc	r26, r26
 4a2:	a4 17       	cp	r26, r20
 4a4:	10 f0       	brcs	.+4      	; 0x4aa <__utoa_common+0x14>
 4a6:	a4 1b       	sub	r26, r20
 4a8:	83 95       	inc	r24
 4aa:	50 51       	subi	r21, 0x10	; 16
 4ac:	b9 f7       	brne	.-18     	; 0x49c <__utoa_common+0x6>
 4ae:	a0 5d       	subi	r26, 0xD0	; 208
 4b0:	aa 33       	cpi	r26, 0x3A	; 58
 4b2:	08 f0       	brcs	.+2      	; 0x4b6 <__utoa_common+0x20>
 4b4:	a9 5d       	subi	r26, 0xD9	; 217
 4b6:	a1 93       	st	Z+, r26
 4b8:	00 97       	sbiw	r24, 0x00	; 0
 4ba:	79 f7       	brne	.-34     	; 0x49a <__utoa_common+0x4>
 4bc:	b1 11       	cpse	r27, r1
 4be:	b1 93       	st	Z+, r27
 4c0:	11 92       	st	Z+, r1
 4c2:	cb 01       	movw	r24, r22
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <strrev>

000004c6 <strrev>:
 4c6:	dc 01       	movw	r26, r24
 4c8:	fc 01       	movw	r30, r24
 4ca:	67 2f       	mov	r22, r23
 4cc:	71 91       	ld	r23, Z+
 4ce:	77 23       	and	r23, r23
 4d0:	e1 f7       	brne	.-8      	; 0x4ca <strrev+0x4>
 4d2:	32 97       	sbiw	r30, 0x02	; 2
 4d4:	04 c0       	rjmp	.+8      	; 0x4de <strrev+0x18>
 4d6:	7c 91       	ld	r23, X
 4d8:	6d 93       	st	X+, r22
 4da:	70 83       	st	Z, r23
 4dc:	62 91       	ld	r22, -Z
 4de:	ae 17       	cp	r26, r30
 4e0:	bf 07       	cpc	r27, r31
 4e2:	c8 f3       	brcs	.-14     	; 0x4d6 <strrev+0x10>
 4e4:	08 95       	ret

000004e6 <_exit>:
 4e6:	f8 94       	cli

000004e8 <__stop_program>:
 4e8:	ff cf       	rjmp	.-2      	; 0x4e8 <__stop_program>
