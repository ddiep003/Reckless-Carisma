
Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000029c  00000330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800104  00800104  00000334  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7e  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000927  00000000  00000000  000011e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000686  00000000  00000000  00001b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000528  00000000  00000000  00002324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003fb  00000000  00000000  0000284c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002c47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e9       	ldi	r30, 0x9C	; 156
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b7 d0       	rcall	.+366    	; 0x232 <main>
  c4:	e9 c0       	rjmp	.+466    	; 0x298 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
#include "timer.h"
#include "usart_ATmega1284.h"

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
  f8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
  fc:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 100:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 104:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 126:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 12a:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 12e:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 13c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 140:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 144:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <TimerFlag>
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 162:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 166:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 16a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 16e:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 172:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <initUSART>:
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	81 f0       	breq	.+32     	; 0x1ac <initUSART+0x24>
 18c:	e1 ec       	ldi	r30, 0xC1	; 193
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	88 61       	ori	r24, 0x18	; 24
 194:	80 83       	st	Z, r24
 196:	e2 ec       	ldi	r30, 0xC2	; 194
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	86 60       	ori	r24, 0x06	; 6
 19e:	80 83       	st	Z, r24
 1a0:	83 e3       	ldi	r24, 0x33	; 51
 1a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1aa:	08 95       	ret
 1ac:	e9 ec       	ldi	r30, 0xC9	; 201
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	88 61       	ori	r24, 0x18	; 24
 1b4:	80 83       	st	Z, r24
 1b6:	ea ec       	ldi	r30, 0xCA	; 202
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	86 60       	ori	r24, 0x06	; 6
 1be:	80 83       	st	Z, r24
 1c0:	83 e3       	ldi	r24, 0x33	; 51
 1c2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 1c6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1ca:	08 95       	ret

000001cc <USART_Flush>:
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	29 f4       	brne	.+10     	; 0x1da <USART_Flush+0xe>
 1d0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 1d4:	88 23       	and	r24, r24
 1d6:	84 f0       	brlt	.+32     	; 0x1f8 <USART_Flush+0x2c>
 1d8:	08 95       	ret
 1da:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 1de:	88 23       	and	r24, r24
 1e0:	ac f4       	brge	.+42     	; 0x20c <USART_Flush+0x40>
 1e2:	a6 ec       	ldi	r26, 0xC6	; 198
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	e0 ec       	ldi	r30, 0xC0	; 192
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	8c 91       	ld	r24, X
 1ec:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1f0:	80 81       	ld	r24, Z
 1f2:	88 23       	and	r24, r24
 1f4:	d4 f3       	brlt	.-12     	; 0x1ea <USART_Flush+0x1e>
 1f6:	08 95       	ret
 1f8:	ae ec       	ldi	r26, 0xCE	; 206
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	e8 ec       	ldi	r30, 0xC8	; 200
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	8c 91       	ld	r24, X
 202:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 206:	80 81       	ld	r24, Z
 208:	88 23       	and	r24, r24
 20a:	d4 f3       	brlt	.-12     	; 0x200 <USART_Flush+0x34>
 20c:	08 95       	ret

0000020e <USART_Receive>:
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	41 f0       	breq	.+16     	; 0x222 <USART_Receive+0x14>
 212:	e0 ec       	ldi	r30, 0xC0	; 192
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	88 23       	and	r24, r24
 21a:	ec f7       	brge	.-6      	; 0x216 <USART_Receive+0x8>
 21c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 220:	08 95       	ret
 222:	e8 ec       	ldi	r30, 0xC8	; 200
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	88 23       	and	r24, r24
 22a:	ec f7       	brge	.-6      	; 0x226 <USART_Receive+0x18>
 22c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 230:	08 95       	ret

00000232 <main>:
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 232:	11 b8       	out	0x01, r1	; 1
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 238:	84 b9       	out	0x04, r24	; 4
 23a:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
 23c:	87 b9       	out	0x07, r24	; 7
 23e:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 240:	8a b9       	out	0x0a, r24	; 10
 242:	1b b8       	out	0x0b, r1	; 11

	TimerOn();
 244:	41 df       	rcall	.-382    	; 0xc8 <TimerOn>
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 246:	84 e6       	ldi	r24, 0x64	; 100
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	a0 e0       	ldi	r26, 0x00	; 0
 24c:	b0 e0       	ldi	r27, 0x00	; 0
 24e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 252:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 256:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 25a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 25e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 262:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 266:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 26a:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
	TimerSet(100);
	initUSART(0);
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	8b df       	rcall	.-234    	; 0x188 <initUSART>
	initUSART(1);
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	89 df       	rcall	.-238    	; 0x188 <initUSART>
	USART_Flush(0);
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	a9 df       	rcall	.-174    	; 0x1cc <USART_Flush>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 27a:	c0 ec       	ldi	r28, 0xC0	; 192
 27c:	d0 e0       	ldi	r29, 0x00	; 0
 27e:	88 81       	ld	r24, Y
	while(1)
	{
		if (USART_HasReceived(0))
 280:	88 23       	and	r24, r24
 282:	1c f4       	brge	.+6      	; 0x28a <main+0x58>
		{
			PORTC = USART_Receive(0);
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	c3 df       	rcall	.-122    	; 0x20e <USART_Receive>
 288:	88 b9       	out	0x08, r24	; 8
		}
		else
		{
			
		}
		while (!TimerFlag);	// Wait 1 sec
 28a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <TimerFlag>
 28e:	88 23       	and	r24, r24
 290:	e1 f3       	breq	.-8      	; 0x28a <main+0x58>
		TimerFlag = 0;
 292:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <TimerFlag>
		
	}
 296:	f3 cf       	rjmp	.-26     	; 0x27e <main+0x4c>

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
